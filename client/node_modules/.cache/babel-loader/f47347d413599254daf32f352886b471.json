{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user.types';\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* createProfilefromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* googleSignInAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield createProfilefromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield createProfilefromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield createProfilefromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserSignedOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignedOut);\n}\nexport function* userSignInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield createUserProfileDocument({\n      user,\n      additionalData: {\n        displayName\n      }\n    });\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onSignUpSuccess(user) {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, userSignInAfterSignUp);\n}\n;\nexport function* userSigningUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onUserSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, userSigningUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onUserSignOut), call(onUserSignUp)]);\n}","map":{"version":3,"sources":["/Users/sanghapark/Documents/react-course/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","SignInSuccess","SignInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","createProfilefromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","googleSignInAsync","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","isUserSignedOut","signOut","onUserSignOut","SIGN_OUT_START","userSignInAfterSignUp","displayName","signInFailure","onSignUpSuccess","SIGN_UP_SUCCESS","userSigningUp","createUserWithEmailAndPassword","onUserSignUp","SIGN_UP_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,aAAtF,QAA2G,gBAA3G;AAGA,OAAO,UAAUC,yBAAV,CAAoCC,QAApC,EAA8CC,cAA9C,EAA8D;AACjE,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMjB,IAAI,CAACK,yBAAD,EAA4BU,QAA5B,EAAsCC,cAAtC,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMlB,GAAG,CAACO,aAAa,CAAC;AAACY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACQ,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,iBAAV,GAA8B;AAEjC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMrB,IAAI,CAACsB,eAAL,CAAqBrB,cAArB,CAAvB;AACA,UAAMU,yBAAyB,CAACU,IAAD,CAA/B;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACQ,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AAEJ;AAED,OAAO,UAAUI,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CAACQ,eAAe,CAACoB,oBAAjB,EAAuCJ,iBAAvC,CAAhB;AACH;AAGD,OAAO,UAAUK,gBAAV,CAA2B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA3B,EAAyD;AAE5D,MAAI;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMrB,IAAI,CAAC6B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMjB,yBAAyB,CAACU,IAAD,CAA/B;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACQ,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUW,kBAAV,GAA+B;AAClC,QAAMlC,UAAU,CAACQ,eAAe,CAAC2B,mBAAjB,EAAsCN,gBAAtC,CAAhB;AACH;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACnC,MAAI;AACA,UAAMpB,QAAQ,GAAG,MAAMT,cAAc,EAArC;AACA,QAAI,CAACS,QAAL,EAAe;AACf,UAAMD,yBAAyB,CAACC,QAAD,CAA/B;AACH,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACQ,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUc,kBAAV,GAA+B;AAClC,QAAMrC,UAAU,CAACQ,eAAe,CAAC8B,kBAAjB,EAAqCF,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUG,eAAV,GAA4B;AAC/B,MAAI;AACA,UAAMnC,IAAI,CAACoC,OAAL,EAAN;AACA,UAAMtC,GAAG,CAACS,cAAc,EAAf,CAAT;AACH,GAHD,CAGE,OAAOY,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACU,cAAc,CAACW,KAAD,CAAf,CAAT;AACH;AACJ;AAED,OAAO,UAAUkB,aAAV,GAA0B;AAC7B,QAAMzC,UAAU,CAACQ,eAAe,CAACkC,cAAjB,EAAiCH,eAAjC,CAAhB;AACH;AAID,OAAO,UAAUI,qBAAV,CAAgC;AAACb,EAAAA,OAAO,EAAE;AAACL,IAAAA,IAAD;AAAOR,IAAAA;AAAP;AAAV,CAAhC,EAAmE;AACtE,MAAG;AACC,UAAMX,yBAAyB,CAAC;AAACmB,MAAAA,IAAD;AAAOR,MAAAA,cAAc,EAAE;AAAC2B,QAAAA;AAAD;AAAvB,KAAD,CAA/B;AACH,GAFD,CAEE,OAAOrB,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAAC2C,aAAa,CAACtB,KAAD,CAAd,CAAT;AACH;AAEJ;AAED,OAAO,UAAUuB,eAAV,CAA0BrB,IAA1B,EAAgC;AACnC,QAAMzB,UAAU,CAACQ,eAAe,CAACuC,eAAjB,EAAkCJ,qBAAlC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUK,aAAV,CAAwB;AAAClB,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBY,IAAAA;AAAlB;AAAV,CAAxB,EAAmE;AACtE,MAAI;AACA,UAAM;AAAEnB,MAAAA;AAAF,QAAW,MAAMrB,IAAI,CAAC6C,8BAAL,CAAoClB,KAApC,EAA2CC,QAA3C,CAAvB;AACA,UAAM9B,GAAG,CAACW,aAAa,CAAC;AAACY,MAAAA,IAAD;AAAOR,MAAAA,cAAc,EAAE;AAAC2B,QAAAA;AAAD;AAAvB,KAAD,CAAd,CAAT;AACH,GAHD,CAGE,OAAOrB,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACY,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AAEJ;AAED,OAAO,UAAU2B,YAAV,GAAyB;AAC5B,QAAMlD,UAAU,CAACQ,eAAe,CAAC2C,aAAjB,EAAgCH,aAAhC,CAAhB;AACH;AAED,OAAO,UAAUI,SAAV,GAAsB;AACzB,QAAMjD,GAAG,CAAC,CACNF,IAAI,CAAC0B,mBAAD,CADE,EAEN1B,IAAI,CAACiC,kBAAD,CAFE,EAGNjC,IAAI,CAACoC,kBAAD,CAHE,EAINpC,IAAI,CAACwC,aAAD,CAJE,EAKNxC,IAAI,CAACiD,YAAD,CALE,CAAD,CAAT;AAOH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nimport UserActionTypes from './user.types';\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\n\n\nexport function* createProfilefromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield userRef.get();\n        yield put(SignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* googleSignInAsync() {\n\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield createProfilefromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\n\n\nexport function* emailSignInAsync({payload: {email, password}}) {\n\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield createProfilefromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield createProfilefromUserAuth(userAuth); \n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* isUserSignedOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\nexport function* onUserSignOut() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignedOut)\n}\n\n\n\nexport function* userSignInAfterSignUp({payload: {user, additionalData}}) {\n    try{\n        yield createUserProfileDocument({user, additionalData: {displayName}});\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n    \n}\n\nexport function* onSignUpSuccess(user) {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, userSignInAfterSignUp)\n};\n\nexport function* userSigningUp({payload: {email, password, displayName}}) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({user, additionalData: {displayName}}));\n    } catch (error) {\n        yield put(signUpFailure(error));\n    }\n\n}\n\nexport function* onUserSignUp() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, userSigningUp)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart), \n        call(onEmailSignInStart), \n        call(onCheckUserSession),\n        call(onUserSignOut),\n        call(onUserSignUp)\n    ]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
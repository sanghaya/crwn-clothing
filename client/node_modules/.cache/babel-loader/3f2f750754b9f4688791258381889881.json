{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user.types';\nimport { SignInSuccess, SignInFailure } from './user.actions';\nexport function* createProfilefromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* googleSignInAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield createProfilefromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield createProfilefromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield createProfilefromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserSignedOut() {\n  try {\n    const signOut = yield auth.signOut;\n    put(signOutSuccess);\n  } catch (error) {}\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignedOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/sanghapark/Documents/react-course/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","SignInSuccess","SignInFailure","createProfilefromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","googleSignInAsync","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","isUserSignedOut","signOut","signOutSuccess","onUserSignOut","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nimport UserActionTypes from './user.types';\nimport { SignInSuccess, SignInFailure } from './user.actions';\n\n\nexport function* createProfilefromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(SignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* googleSignInAsync() {\n\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield createProfilefromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\n\n\nexport function* emailSignInAsync({payload: {email, password}}) {\n\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield createProfilefromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield createProfilefromUserAuth(userAuth); \n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* isUserSignedOut() {\n    try {\n        const signOut = yield auth.signOut;\n        put(signOutSuccess);\n    } catch (error) {\n        \n    }\n}\n\nexport function* onUserSignOut() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignedOut)\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}